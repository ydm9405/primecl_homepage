/********************************************
   HTML 이러닝 콘텐츠 프레임워크
   ver:2023 version1.0
   제작사:(주)케이브레인컴퍼니
   제작일:2023.04.
   제작자:이현우

   진도제어 방식
   1. option.js 에서 isControl을 false로 설정
   2. option.js 에서 setPer를 조절
   3. 메뉴 클릭시 LMS 진도가 풀린 페이지면 이동 아니면 lock
   4. 컨트롤러 및 다음페이지는 player.isProgCheck에 따라서 제어
   5. 포팅 버전이 아닌 localhost에서는 임의로 option.isProcTester을 조절하여 테스트 가능
   
   임의 수정 및 무단 배포를 금지합니다.
   Copyright 2023 Kbrainc All rights reserved.
***********************************************/
//Kbc.en//////////////////////////////////////////////////////////////////////////

//let getData = getAgreementLearnerInfo();

;(function(root,name,factory){
   
   root[name] = factory(root["KbcLMS"],root["KbcUtil"]);
   //console.log(root[name])
}(window,"KbcEN",function(LMS,$){

   return (function(modules){
      var exports_pub = {}, exports_all={};

      var propSetter = function(name, val, type, setter, getter){
         setter = setter || function(){};
         getter = getter || function(){};
         
         Object.defineProperty(exports_all, "_"+name, {
            value:val,enumerable:false,writable:true,configurable:false
         });

         Object.defineProperty(exports_all, name, {
            set:function(){
               this["_"+name] = arguments[0]
               setter.call(this,this["_"+name]);
            },
            get:function(){
               getter.call(this);
               return this["_"+name];
            },
            enumerable:true, configurable:false
         });

         if(type.toLowerCase() == "private") return;

         Object.defineProperty(exports_pub, name, {
            set:function(){
               exports_all[name] = arguments[0]
            },
            get:function(){
               return exports_all[name];
            },
            enumerable:true, configurable:false
         })

      };

      modules.forEach(function(ka){
         if(typeof ka === "function"){
            var module = {name:"", exports:{}, type:"private"};
            ka.call(module.exports, module, exports_all, LMS, $);
            
            if(!module.name)  return;
            
            exports_all[module.name] = module.exports;

            if(module.type.toLowerCase() == "public")
               exports_pub[module.name] = exports_all[module.name];


         }else if(typeof ka === "object"){
            Object.keys(ka).forEach(function(type){
               Object.keys(ka[type]).forEach(function(val){
                  var value = ka[type][val];
               
                  if(value == null || value == undefined || typeof value !== "object"){
                     propSetter(val,value,type);
                  }else{
                     var setter = value["set"],
                        getter = value["get"];
                     if(setter || getter){//prop 일때
                        propSetter(val,value,type,setter,getter)
                     }else{
                        exports_all[val] = value;
                        if(type.toLowerCase() == "public")
                           exports_pub[val] = exports_all[val];                   
                     }
                  }    
               })
         })            
         };
      });

      return exports_pub;
   }([
      //variable/////////////////////////////////////////////////////////////////
      {
         PUBLIC:{
            version:"2023v1.1",
            size:{width:0,height:0},
            chapter:{
               name:"00",
               totalpages:0,
               nowpage:0,
               nowsco:"a_00",
               scos:[]
            },
            courseInfo:null,//휴넷용
            controllSubMenus:{},
            debug:{
               value:false,
               set:function(bol){
                  if(bol){
                     console.log("%c ::Kbrainc E-learning Framework "+this.version+" Debug Mode:: ")
                     $.keyblock.deactive();
                  }else{
                     $.keyblock.active();
                  }
               },
               get:function(){

               }
            },
            bookmarks:{
               value:{"page": null , "time": 0},
               set:function(np, time, isLMSSave){
                  this.value.page = np;
                  this.value.time = time;
                  //저장 요청시에
                  // console.log("bookmarks-set : ", np, time, isLMSSave)
                  if(isLMSSave) {
                     LMS.bookmark = this.value;
                  }
               },
               get:function(){
                  
               }
            },
            isVodLoaded:false,
            preloader:null
         },
         PRIVATE:{
            editor:["sample.kbrainc.com","localhost","node.kbc"],
            isInited:false,
            MSG_STR:{
               FIRST_PAGE:"첫 페이지입니다.",
               END_PAGE:"마지막 페이지입니다.",
               STUDY_LOCK:"학습한 시간까지만 이동이 가능합니다.",
               RATE_LOCK:"학습완료 후 사용 가능합니다.",
               MOVE_LOCK:"학습을 완료해주세요.",
               SCO_MOVE_LOCK:"좌측 메뉴를 클릭해 주세요."
            },
            buttons:{},
            wrap:{
               main:null, vod:null, section:null, nav:null, nowpage:null, totalpages:null
            },
            sco:{
               name:"a_0", totalpages:0, nowpage:0, pages:[]
            },
            option:{},
            pages:{},
            player:{},
            streamURL:null
         }
      },


      //start - 엔진시작/////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         
         var setSkin = function(){
            var option = EXP.option;
            EXP.size.width = option.size.width;
            EXP.size.height = option.size.height;
            EXP.streamURL = (!LMS.isPorting)?option.cdnServer.local:option.cdnServer.porting;
            EXP.isProcTester = option.isProcTester;

            // option.skin.main = "../../../_ui/_skin/"+option.skin.main+"/"
            // option.skin.control = "../../../_ui/_skin/"+option.skin.control+"/"
            $.load(option.skin.main+"main/kbc.en.css",option.skin.control+"player/kbc.player.css");

            return new Promise(function(resolve,reject){
               try{
                  if(EXP.isScorm) window.top.videoSpeed = function(){};//연수원 무력화...
               }catch(e){}
               
               $.load.TXT(option.skin.main+"main/kbc.en.html",option.skin.control+"player/kbc.player.html").then(function(data){
                  //console.log("data : ", data)
                  var body = document.querySelector("body")
                  body.insertAdjacentHTML("beforeend",data[0]);
                  ($.isMobile)?body.classList.add("mob"):body.classList.add("pc");
               
                  EXP.wrap.main = document.querySelector(".main");
                  EXP.wrap.header = document.querySelector("header");
                  EXP.wrap.section = document.querySelector("section");
                  
                  EXP.wrap.chapter = document.querySelector("header .chapter");
                  EXP.wrap.course = document.querySelector("header .course");

                  EXP.wrap.vod = EXP.wrap.main.querySelector(".video-container")
                  EXP.wrap.vod.insertAdjacentHTML("beforeend",data[1]);

                  EXP.wrap.nav = document.querySelector("nav");
                  EXP.wrap.nextB = document.querySelector(".next_wrap");
                  EXP.wrap.alert = document.querySelector(".alert_wrap");
                  EXP.wrap.main.style.maxWidth = EXP.option.size.width+"px";
                  
                  EXP.wrap.nowpage = EXP.wrap.main.querySelector(".page_wrap .nowpage")
                  EXP.wrap.totalpages = EXP.wrap.main.querySelector(".page_wrap .totalpages")
                  if(LMS.isScorm){
                     EXP.wrap.nav.parentNode.removeChild(EXP.wrap.nav)
                     delete EXP.wrap.nav;
                  }

                  window.trigger("resize");
                  resolve("skin loaded.")
                  //console.log("skin loaded.");
                  
               });
            });
         }

         var setPage = function(){
            document.title = EXP.pages.name.course;
            var altReg = new RegExp("alt=(.)+>","g")
            var resg = altReg.exec(document.title)
            document.title =(resg)?resg[0].replace("alt=","").replace(">","").replace(/\'/gi,""):document.title;
            
            var parr = location.href.split("/").reverse();
            // console.log("parr : ", parr)
            EXP.chapter.name = parr[3];
            EXP.chapter.nowpage = 1;
            EXP.chapter.nowsco ="";
            EXP.chapter.scos = [];

            //console.log(EXP.pages.menu)
            EXP.sco.name = parr[1];
            EXP.sco.nowpage = (parr[0] ==="index.html") ? 1 : parseInt(parr[0].split(".")[0].split("_")[1] , 10);
            LMS.nowPage = EXP.sco.nowpage;
           
            var tempbook = EXP.sco.nowpage;
            Object.keys(EXP.pages.menu).some(function(v){
               var isBreak = false;
               var m = EXP.pages.menu[v];
               Object.keys(m.sco).some(function(vs){
                  tempbook -= Object.keys(m.sco[vs].pages).length;
                  if(tempbook<=0){
                     isBreak = true;
                     EXP.sco.name = vs;
                     EXP.sco.nowpage =Object.keys(m.sco[vs].pages).length + tempbook;
                     return true;
                  };                        
               });
               return isBreak;
            });


            Object.keys(EXP.pages.menu).forEach(function(v){
               var m = EXP.pages.menu[v];
               Object.keys(m.sco).forEach(function(vs){
                  var pages = Object.keys(m.sco[vs].pages);
                  EXP.chapter.scos.push({name:vs,totalpages:pages.length});
                  EXP.chapter.totalpages+=pages.length;
                  if(vs == EXP.sco.name) EXP.sco.totalpages = pages.length;
                  m.sco[vs].type = m.sco[vs].type || "normal";
                  
                  pages.forEach(function(vk,i){

                     var page = m.sco[vs].pages[vk];
                     page.type = page.type || "mp4";
                     page.skipTime = page.skipTime || 0;
                     if(page.type == "mp4"){
                        if(LMS.isPorting){
                           if(!EXP.option.cdnServer.porting || EXP.option.cdnServer.porting == EXP.option.cdnServer.local || EXP.option.cdnServer.porting.indexOf("http") == -1){
                              page.url = (page.media.path || EXP.streamURL)+(page.media.ID || vs+"_"+$.itostr(i+1))+".mp4";   
                           }else{
                              page.url = (page.media.path || EXP.streamURL)+EXP.chapter.name+"/media/"+(page.media.ID || vs+"_"+$.itostr(i+1))+".mp4";
                           };                           
                        }else{
                           page.url = (page.media.path || EXP.streamURL)+(page.media.ID || vs+"_"+$.itostr(i+1))+".mp4";
                        }
                     }else{
                        // page.url =(page.media.path || "../../../_ui/_common/")+(page.media.ID || "blank")+".mp4"
                     };
                     
                     if(EXP.editor.indexOf(location.hostname)!=-1 || location.hostname.indexOf("192.168") != -1 || location.hostname.indexOf("test.kbc") != -1){
                        page.url = page.media.preview || page.url;
                     }

                     if(page.type != "html" && (Array.isArray(page.caption) || page.caption.ID)){
                        
                        if(page.caption.ID){
                           page.caption = (page.caption.path || EXP.option.caption.path)+(page.caption.ID || vs+"_"+$.itostr(i+1))+"."+EXP.option.caption.type;
                        }else{
                           var temp_caption = [];
                           for(var i = 0;i<page.caption.length;++i){
                              temp_caption[i] = {
                              url:(page.caption[i].path || EXP.option.caption.path)+(page.caption[i].ID || vs+"_"+$.itostr(i+1)),
                              name:page.caption[i].name,type:page.caption[i].type
                              };
                              if(temp_caption[i].type){
                                 temp_caption[i].url+="_"+temp_caption[i].type+"."+EXP.option.caption.type
                              }else{
                                 temp_caption[i].url+="."+EXP.option.caption.type
                              }
                           
                           }
                           page.caption = temp_caption;
                        }
                     }else{
                        page.caption = "";
                     }
                     page.activity = page.activity || [];
                     page.anchor = page.anchor || [];
                     
                     if(page.isTitle == undefined)
                        page.isTitle = true;
                  
                  });
               })
            });

               


            EXP.sco.pages = [];
            var nowpage = EXP.pages.menu[EXP.sco.name.split("_")[0]].sco[EXP.sco.name].pages;
            Object.keys(nowpage).forEach(function(v){
               EXP.sco.pages.push(nowpage[v]);
            });

            $.extend(true,EXP.controllSubMenus,{data:EXP.pages.sub_menu})

            
            return new Promise(function(resolve,reject){
               resolve("setpage");
            });
         }

         var setIndexMenu = function(){
            //차시별 메뉴 css
            $.load("../../contents/menu.css");
            //메뉴 전개
            var p = this;
            var ul,li,button;
            var menus = EXP.pages.menu;
            
            /* const getGoPageNum = (scoName, initNum=1) => { 
               const nidx = EXP.chapter.scos.map(function(e){return e.name}).indexOf(scoName);
               return goPageNum = EXP.chapter.scos.slice(0, nidx).reduce((accumulator, currentValue, currentIndex, array)=>{
                  const accNum = currentValue.totalpages;
                  return accumulator + accNum;
               }, initNum)
            } */

            Object.keys(menus).forEach(function(v){
               ul = document.createElement("ul");
               ul.classList.add("sco_"+v);
               EXP.wrap.nav.appendChild(ul);               
               li = document.createElement("li");
               button = document.createElement("button");
               button.setAttribute("title",menus[v].title)
               button.setAttribute("sco",v+"_01");
               button.innerHTML = menus[v].title;
               button.setAttribute("gonum", EXP.getGoPageNum(v+"_01"));
               li.appendChild(button)
               li.classList.add("title");
               
               ul.appendChild(li);
               

               Object.keys(menus[v].sco).forEach(function(vs){
                     li = document.createElement("li");
                     button = document.createElement("button");
                     button.innerHTML = menus[v].sco[vs].title;
                     button.setAttribute("title",menus[v].sco[vs].title)
                     button.setAttribute("sco",vs)
                     button.setAttribute("data-prog","미");
                     button.setAttribute("gonum", EXP.getGoPageNum(vs));
                     li.appendChild(button)
                     li.classList.add(vs);
                     if(menus[v].sco[vs].type) li.classList.add(menus[v].sco[vs].type);
                     if(!menus[v].sco[vs].isDisplay) li.style.display = "none";
                     ul.appendChild(li);

               });
            });

            EXP.wrap.nav.querySelectorAll("li button").forEach(function(ka){
               ka.addEventListener("click",function(){
                  const nidx = EXP.chapter.scos.map(function(e){return e.name}).indexOf(EXP.chapter.nowsco);
                  const toidx = EXP.chapter.scos.slice(0, nidx+1).map(function(e){return e.name}).indexOf(this.getAttribute("sco"));

                  //console.log("EXP.chapter.nowPage : ", EXP.chapter.nowPage, this.getAttribute("gonum"))

                  //우선 페이지 진도가 풀리기 전까진 앞으로만 이동 할수 있도록 처리
                  if(!EXP.player.isProgCheck && toidx == -1){
                     EXP.alert(EXP.MSG_STR.MOVE_LOCK);
                     return;
                  }                  

                  //페이지 진도가 풀리면 이동 정보를 전달
                  EXP.pageControl.goPage(1,this.getAttribute("sco"), "nav");
                  EXP.buttons.index.trigger("click");
                  
               })
            })
            
            EXP.buttons.index = EXP.wrap.main.querySelector("#index_btn button") || EXP.wrap.main.querySelector(".index");
            EXP.buttons.index.addEventListener("click",function(){
               if(EXP.wrap.nav.classList.contains("on")){
                  EXP.wrap.nav.classList.remove("on")
                  this.setAttribute("title","메뉴열기");
                  this.innerText = "메뉴열기";
               }else{
                  EXP.wrap.nav.classList.add("on")
                  this.setAttribute("title","메뉴닫기");
                  this.innerText = "메뉴닫기";
               }
            });
            if(EXP.wrap.main.querySelector("#index_btn button")){            
               EXP.buttons.index_cloes = EXP.wrap.main.querySelector(".index");
               EXP.wrap.nav.appendChild(EXP.buttons.index_cloes);
               EXP.buttons.index_cloes.addEventListener("click",function(){
                  EXP.buttons.index.trigger("click");
               });
            }
         }

         var setBtn = function(){
            EXP.buttons.prev = EXP.wrap.main.querySelector(".btn_wrap .prev");
            EXP.buttons.next = EXP.wrap.main.querySelector(".btn_wrap .next");

            EXP.buttons.cprev = EXP.wrap.main.querySelector(".nav_btns_wrap .cPrev") || null;
            EXP.buttons.cnext = EXP.wrap.main.querySelector(".nav_btns_wrap .cNext") || null;

            EXP.buttons.prev.addEventListener("click",function(){
               EXP.pageControl.prev();
            });

            EXP.buttons.next.addEventListener("click",function(){
               EXP.pageControl.next();
            });
            
            
            if(EXP.buttons.cprev){
               EXP.buttons.cprev.addEventListener("click",function(){
                  EXP.pageControl.prev();
               });
            }
            if(EXP.buttons.cnext){
               EXP.buttons.cnext.addEventListener("click",function(){
                  EXP.pageControl.next();
               });
            }

            window.addEventListener("keydown",function(e){
               if(e.ctrlKey && e.altKey && e.shiftKey && e.keyCode == 13){
                  EXP.alert(EXP.sco.name+"_"+$.itostr(EXP.sco.nowpage));
               }
            });
            //스킵 버튼
            EXP.buttons.skip = EXP.wrap.main.querySelector(".skip");
            if(EXP.buttons.skip){
               EXP.buttons.skip.addEventListener("click",function(){
                  var sec = parseInt(EXP.sco.pages[EXP.sco.nowpage-1].skipTime,10);
                  EXP.player.seek(sec)
               });
               
               window.addEventListener("mousemove",function(e){
                  $.motion.remove(EXP.buttons.skip.style,"left");
                  $.motion.remove(EXP.buttons.skip.style,"top");
                  
                  if(EXP.buttons.skip.classList.contains("on")){
                     var sx = EXP.buttons.skip.style.left || getComputedStyle(EXP.buttons.skip)["left"];
                     var sy = EXP.buttons.skip.style.top || getComputedStyle(EXP.buttons.skip)["top"];
                     
                     sx = parseFloat(sx.replace("px",""));
                     sy = parseFloat(sy.replace("px",""));

                     var mainx = EXP.wrap.main.getBoundingClientRect().x;//sco 폴더 내부에
                     var mainy = EXP.wrap.main.getBoundingClientRect().y;//

                     $.motion.add(EXP.buttons.skip.style,"left","px",{s:sx,f:e.clientX-mainx},200);
                     $.motion.add(EXP.buttons.skip.style,"top","px",{s:sy,f:e.clientY-mainy},200);
                     $.motion.play(EXP.buttons.skip.style,false);
                  }
               });
            }
         }

         var pub = null;
         var start = function(optionJson,pageJson){
            //LMS 초기화
            pub = this;
            LMS.init();
            // LMS.isPorting 재설정
            LMS.isPorting = !$.isLocal && (EXP.editor.indexOf(location.hostname)==-1 && location.hostname.indexOf("kbrainc.com") == -1 && location.hostname.indexOf("127.0") == -1 && location.hostname.indexOf("192.168") == -1) ;
            //LMS.isPorting = true
            this.preloader = KbcPreloader.Create();
            this.preloader.set(1);
            
            var promArr = [];
            //스킨로딩
            if(typeof optionJson === "object"){
               EXP.option = optionJson;
               promArr.push(setSkin());
            }else{
               $.load(optionJson).then(function(data){
                  EXP.option = data;
                  promArr.push(setSkin());
               });
            }

            //페이지 정보
            if(typeof pageJson === "object"){
               EXP.pages = pageJson;
               promArr.push(setPage())
            }else{
               $.load(pageJson).then(function(data){
                  EXP.pages = data;
                  promArr.push(setPage());
               })
            };

            var p = this;
            
            Promise.all(promArr).then(function(){
               EXP.preloader.set(50);

               /* if(location.host.indexOf(EXP.option.domain)!=-1)
                  document.domain = EXP.option.domain; */

               EXP.player= KbcPlayer({
                  "사용모듈":EXP.option.control_setting["사용모듈"],
                  "강제진도율":EXP.option.seqPer,
                  "진도완료여부":EXP.option.isControl,
                  "메세지함수":EXP.msg,
                  "초기볼륨":EXP.option.control_setting["초기볼륨"],
                  "컨트롤러숨김기능":EXP.option.control_setting["컨트롤러숨김기능"],
                  "컨트롤러숨김시간":EXP.option.control_setting["컨트롤러숨김시간"],
                  "자동재생":false,
                  "로컬키":(EXP.option.control_setting.useSaveStatus)?EXP.option.localKey:null,
                  "배속단계":EXP.option.control_setting["배속단계"] || [],
                  "배속제한":(EXP.option.control_setting["배속제한"] == undefined)? true:EXP.option.control_setting["배속제한"],
                  "영상품질":EXP.option.control_setting["영상품질"] || [],
                  "시작시간":0,
                  "탑재사이트":EXP.option.lmsType || "",//국립통일교육원 추가하면서 삽입
                  "스킨타입":EXP.option.skin,//버전업 하면서 추가
                  "HTML사이즈":EXP.option.htmlsize//버전업 하면서 추가
               });
               
               EXP.preloader.set(95);
               
               p.player = {};
               
               Object.defineProperties(p.player,{
                  range:{
                     get:function(){
                        return EXP.player.range;
                     }
                  },
                  wrap:{
                     get:function(){
                        return EXP.player.wrap;
                     }
                  },
                  status:{
                     get:function(){
                        return EXP.player.status;
                     }
                  },
                  vod:{
                     get:function(){
                        return EXP.player.vod;
                     }
                  },
                  play:{
                     value:function(){
                        EXP.player.play(arguments[0]);
                     }
                  },
                  pause:{
                     value:function(){
                        EXP.player.pause();
                     }
                  },
                  toggle:{
                     value:function(){
                        EXP.player.toggle();
                     }
                  }
               });

               if(!EXP.option.control_setting["CI출력여부"])
                  EXP.wrap.main.querySelector(".ci_wrap").style.display = "none";
               
               if(!LMS.isScorm){
                  EXP.wrap.chapter.innerHTML = EXP.pages.name.chapter;
                  setIndexMenu.call(p);
               }

               EXP.wrap.course.innerHTML = EXP.pages.name.course;
               setBtn.call(p);

               p.pageControl = {};
               Object.defineProperties(p.pageControl,{
                  next:{value:function(){
                     EXP.pageControl.next.call(EXP.pageControl);
                  }},
                  prev:{value:function(){
                     EXP.pageControl.prev.call(EXP.pageControl);
                  }}
               });
               
               
               EXP.isInited = true;
               
               EXP.pageControl.load(EXP.sco.nowpage,function(){  
                  EXP.preloader.set(100,function(){
                     EXP.isVodLoaded = true;
                     if(EXP.option.control_setting["자동재생"]){
                        EXP.player.play();
                     };
                     delete EXP.preloader;
                  }); 
               });
            });

            return this.start;
         }

         start.onComplete = function(callback){

            if(EXP.isInited){
               callback.call(pub)
            }else{
            
               setTimeout(function(){
                  EXP.start.onComplete.call(pub,callback)
               },100)
            }
         }

         mod.name="start";
         mod.exports = start;
         mod.type = "public";
      }),
      //getGoPageNum,getMsg - 메세지 설정//////////////////////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         function getGoPageNum(scoName, initNum=1){
            const nidx = EXP.chapter.scos.map(function(e){return e.name}).indexOf(scoName);
            const sliceArr = EXP.chapter.scos.slice(0, nidx);

            return goPageNum = sliceArr.reduce((accumulator, currentValue, currentIndex, array)=>{
               const accNum = currentValue.totalpages;
               return accumulator + accNum;
            }, initNum);
         }
         mod.name = "getGoPageNum";
         mod.exports = getGoPageNum;
         mod.type = "public";
      }),
      //pageControl - 페이지 컨트롤/////////////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         var inv,skipInv;
         var pageControl = {};

         pageControl.load = function(np,callback){
            EXP.sco.nowpage = np;

            EXP.chapter.nowsco = EXP.sco.name;
            // console.log("EXP.sco.name : ", EXP.sco.name)
            EXP.chapter.nowpage = 0;
            //비스콤 물리적 페이지 카운터
            var tp = EXP.chapter.scos.map(function(e){return e.name}).indexOf(EXP.chapter.nowsco)
            for(var i = 0;i<tp;++i){
               EXP.chapter.nowpage+=EXP.chapter.scos[i].totalpages;
            }
            EXP.chapter.nowpage+=EXP.sco.nowpage;

            var rnp = (LMS.isScorm)?EXP.sco.nowpage:EXP.chapter.nowpage;
            var rtp = (LMS.isScorm)?EXP.sco.totalpages:EXP.chapter.totalpages;

            EXP.wrap.nowpage.innerHTML = $.itostr(rnp);
            EXP.wrap.totalpages.innerHTML = $.itostr(rtp);

            //스콤페이지 표기 방법추가
            if(LMS.isScorm && EXP.option.pageViewType && EXP.option.pageViewType == "chapter"){
               EXP.wrap.nowpage.innerHTML = $.itostr(EXP.chapter.nowpage);
               EXP.wrap.totalpages.innerHTML = $.itostr(EXP.chapter.totalpages);
            }

            var info =  EXP.sco.pages[np-1];
            if(EXP.player.caption)
               EXP.player.caption.set(info.caption);



            EXP.player.useControl = info.type != "html";
            
            EXP.player.isProgCheck = EXP.option.isControl || LMS.checkedPage(rnp, EXP.chapter.name);
            //EXP.player.isProgCheck = EXP.option.isControl || LMS.checkProg();
            //console.log("EXP.player.isProgCheck : ", EXP.player.isProgCheck)
            EXP.player.load(info.url);
            if(EXP.player.anchor) EXP.player.anchor.set(info.anchor);
            if(EXP.player.rate && !EXP.player.isProgCheck) EXP.player.rate = 1;
            EXP.player.activity.init(info.activity,EXP.option.size);


            clearInterval(inv);
            inv = setInterval(function(){
               EXP.bookmark(rnp, rtp);//북마크 실행
               if(EXP.player.status == "paused"){
                  var seekTime = (LMS.checkedPage(rnp, EXP.chapter.name)) ? 0 : parseInt(LMS.bookmark, 10);
                  clearInterval(inv);
                  if(callback){
                     callback();
                  }else{
                     if(EXP.option.control_setting["자동재생"]){
                        EXP.player.play();
                     };
                  }
                  if(EXP.option.isBookMarkTimeJump) EXP.player.seek(seekTime);
               };
            },100);


            //skip버튼 체크
            if(EXP.buttons.skip){
               clearInterval(skipInv)
               skipInv = setInterval(function(){
                  if(EXP.player.duration>0){
                     if(info.skipTime>0){
                        if(EXP.player.currentTime>=0.1 && EXP.player.currentTime<info.skipTime){
                           EXP.buttons.skip.classList.add("on");
                        }else{
                           EXP.buttons.skip.classList.remove("on");
                        }
                     }else{
                        clearInterval(skipInv);
                        EXP.buttons.skip.classList.remove("on");
                     }
                  }else{
                     EXP.buttons.skip.classList.remove("on");
                  }
               },100)
            };

            

            //메뉴 활성화
            if(!LMS.isScorm){
               EXP.wrap.nav.querySelectorAll("ul").forEach(function(ka){
                  ka.classList.remove("on");
                  ka.querySelectorAll("li").forEach(function(kb){
                     kb.classList.remove("on");
                  })
               })

               EXP.wrap.nav.querySelector("li."+EXP.chapter.nowsco).classList.add("on");
               EXP.wrap.nav.querySelector("ul.sco_"+EXP.chapter.nowsco.split("_")[0]).classList.add("on");
            }

            //다음 말풍선 설정
            if(EXP.wrap.nextB){
               EXP.wrap.nextB.classList.remove("on");
               EXP.wrap.nextB.classList.remove("next");
               EXP.wrap.nextB.classList.remove("sco");
               EXP.wrap.nextB.classList.remove("end");
               if(LMS.isScorm){
                  if(EXP.option.isScoMovable){
                     if(EXP.chapter.nowpage < EXP.chapter.totalpages){
                        EXP.wrap.nextB.classList.add("next");
                     }else{
                        EXP.wrap.nextB.classList.add("end");
                     }
                  }else{
                     if(EXP.sco.nowpage<EXP.sco.totalpages){
                        EXP.wrap.nextB.classList.add("next");
                     }else{
                        if(EXP.chapter.nowpage < EXP.chapter.totalpages){
                           EXP.wrap.nextB.classList.add("sco");
                        }else{
                           EXP.wrap.nextB.classList.add("end");
                        }
                        
                     }
                  }
               }else{
                  if(EXP.chapter.nowpage < EXP.chapter.totalpages){
                     EXP.wrap.nextB.classList.add("next");
                  }else{
                     EXP.wrap.nextB.classList.add("end");
                  }
               }
               
            }

            //헤더 설정
            if(EXP.wrap.header){
               if(info.isTitle){
                  EXP.wrap.header.classList.add("on")
               }else{
                  EXP.wrap.header.classList.remove("on")
               }
            }
         };
         pageControl.prevChap = function(){
            var prevChapter = parseInt(EXP.chapter.name, 10) - 1;
            var url = "../../../"+$.itostr(prevChapter)+"/html/a_01/"+$.itostr(prevChapter)+"_01.html";
            
            if(prevChapter >= 1){
               if(LMS.isPorting && !EXP.isProcTester){
                  var pageName = $.itostr(prevChapter)+"_01.html";
                  LMS.hunetPageMove(pageName);
               }else{
                  location.assign(url);
               };
            }else{
               EXP.alert(EXP.MSG_STR.FIRST_PAGE);
            }            
         }
         pageControl.nextChap = function(){
            var nextChapter = parseInt(EXP.chapter.name, 10) + 1;
            var url = "../../../"+$.itostr(nextChapter)+"/html/a_01/"+$.itostr(nextChapter)+"_01.html";
            
            if(nextChapter <= EXP.courseInfo){
               if(LMS.isPorting && !EXP.isProcTester){
                     var pageName = $.itostr(nextChapter)+"_01.html";
                     LMS.hunetPageMove(pageName);                  
               }else{
                  location.assign(url);
               };
            }else{
               EXP.alert(EXP.MSG_STR.END_PAGE);
            }
            
         };
         pageControl.move = function(np){
            var url = (LMS.isScorm) ? 
               "../"+EXP.sco.name+"/"+EXP.chapter.name+"_"+$.itostr(np)+".html":
               "./"+EXP.chapter.name+"_"+$.itostr(np)+".html";
               
               // 휴넷용
               if(LMS.isPorting && !EXP.isProcTester){
                  var pageName = EXP.chapter.name+"_"+$.itostr(np)+".html";
                  LMS.hunetPageMove(pageName);
               }else{
                  location.assign(url);
               };
         }
        

         pageControl.prev = function(){
            var np = EXP.sco.nowpage-1;
            if(np>=1){
               this.goPage(np,EXP.sco.name);
            }else{
               this.prevSco();
            }
         };
         pageControl.prevSco = function(){
            var nidx = EXP.chapter.scos.map(function(e){return e.name}).indexOf(EXP.chapter.nowsco);
            if(nidx == 0){
               this.prevChap();
               //EXP.alert(EXP.MSG_STR.FIRST_PAGE);
            }else{
               if(!EXP.option.isScoMovable && LMS.isScorm){
                  EXP.alert(EXP.MSG_STR.SCO_MOVE_LOCK);
                  return;
               }
               this.goPage(EXP.chapter.scos[nidx-1].totalpages, EXP.chapter.scos[nidx-1].name); 
            }
         };

         pageControl.next = function(){
            var np = EXP.sco.nowpage+1;
            if(!EXP.player.isProgCheck){
               EXP.alert(EXP.MSG_STR.MOVE_LOCK);
               return;
            }

            if(np<=EXP.sco.totalpages){
               this.goPage(np,EXP.sco.name);
            }else{
               this.nextSco();
            }
         };
         pageControl.nextSco = function(){
            var nidx = EXP.chapter.scos.map(function(e){return e.name}).indexOf(EXP.chapter.nowsco);
             // console.log("nextSco-nidx : ", nidx , EXP.chapter.scos.length-1);
            if(nidx == EXP.chapter.scos.length-1){
               this.nextChap();
               //EXP.alert(EXP.MSG_STR.END_PAGE);
            }else{
               if(!EXP.option.isScoMovable && LMS.isScorm){
                  EXP.alert(EXP.MSG_STR.SCO_MOVE_LOCK);
                  return;
               }
               this.goPage(1,EXP.chapter.scos[nidx+1].name);
            }
         };
         
         pageControl.goPage = function(np,sconame, isNav){
            //isNav는 메뉴를 클릭해서 정보를 받았다는 것을 구분하기 위한 파라미터 


            //이동할려는 페이지 물리적 페이지 번호계산
            /* const tp = EXP.chapter.scos.map(function(e){return e.name}).indexOf(sconame)
               mnp = 0;
            for(var i = 0;i<tp;++i){
               mnp+=EXP.chapter.scos[i].totalpages;
            };
            mnp+=np; */
            


            
            const rnp = EXP.chapter.nowpage;
            const rtp = EXP.chapter.totalpages;
            const movePageNum = EXP.getGoPageNum(sconame, np);//가려는 페이지 번호
            
            if(isNav) {//메뉴를 클릭해서 넘어오면....
               if(LMS.isPorting){
                  //가려는 페이지 상태체크
                  const isPortingMoveable = LMS.menuCheckedPage(movePageNum, EXP.chapter.name) || EXP.option.isControl;
                  if(isPortingMoveable){//포팅 상태고 진도가 완료된 곳이라면 메뉴로 이동 가능 처리
                     console.log("메뉴이동 가능 여부 1 : ", isPortingMoveable)
                     //this.move(movePageNum);
                     return;
                  }

                  
                  //가려는 페이지가 1 ~ 현재페이지 일 때
                  if(movePageNum <= rnp){
                     console.log("메뉴이동 가능 여부 2 : ", movePageNum , rnp)
                     //this.move(movePageNum);
                     return;
                  }

                  //가려는 페이지가 다음페이지 일 때 컨트롤러 제어가 풀린 상태라면
                  if(movePageNum == rnp+1 && EXP.isProgCheck){
                     console.log("메뉴이동 가능 여부 3 : ", movePageNum , rnp+1 , EXP.isProgCheck)
                     //this.move(movePageNum);
                     return;
                  }

                  console.log("메뉴이동 가능 여부 2 : ", movePageNum , rnp+1 , EXP.isProgCheck)
                  EXP.alert(EXP.MSG_STR.MOVE_LOCK);
                  return;  
               }
            };
            console.log(rnp , movePageNum, rtp);
            this.move(movePageNum);

            /* if(sconame == EXP.chapter.nowsco){//sco안에서의 페이지 이동
               var isNowChecked = LMS.checkedPage(rnp, EXP.chapter.name);               
               var isMoveable = (np<=EXP.sco.nowpage) || (isNowChecked && EXP.sco.nowpage+1 == np);

               if(!LMS.isScorm)
                  isMoveable = isMoveable || LMS.checkedPage(mnp, EXP.chapter.name);
               
               if(!isMoveable){
                  EXP.alert(EXP.MSG_STR.MOVE_LOCK);
                  return;
               }

               if(EXP.player.wrap.main.classList.contains("fullscreen") && EXP.option.mode != "s")
                  EXP.player.fullscreen();
               if(LMS.isPorting && isNowChecked) LMS.checkProg(true);//이동 가능 여부 확인
               
               //국립 통일교육원 통합하면서 load와 move 분기 처리
               if(EXP.option.mode == "s"){
                  this.load(np)
               }else{
                  // console.log("0np : " , np, mnp, !LMS.isScorm);
                  (!LMS.isScorm) ? this.move(mnp) : this.move(np);
               }
            }else{//sco를 넘어서 페이지 이동
               var nidx = EXP.chapter.scos.map(function(e){return e.name}).indexOf(EXP.chapter.nowsco);
               var midx = EXP.chapter.scos.map(function(e){return e.name}).indexOf(sconame);
               var isNowCheckedSco = LMS.checkedSco();
               var isMoveable = (midx<=nidx) || (isNowCheckedSco && nidx+1 == midx);

               if(!LMS.isScorm)
                  isMoveable = isMoveable || (LMS.checkedPage(rnp, EXP.chapter.name) && rnp+1 == mnp) || LMS.checkedPage(mnp, EXP.chapter.name);

               if(!isMoveable){
                  EXP.alert(EXP.MSG_STR.MOVE_LOCK);
                  return
               }

               EXP.sco.name = EXP.chapter.scos[midx].name;
               EXP.sco.totalpages = EXP.chapter.scos[midx].totalpages;
               EXP.sco.pages = [];

               var pages = EXP.pages.menu[EXP.sco.name.split("_")[0]].sco[EXP.sco.name].pages;
               Object.keys(pages).forEach(function(v){
                  EXP.sco.pages.push(pages[v]);
               });
               if(EXP.player.wrap.main.classList.contains("fullscreen") && EXP.option.mode != "s")
                  EXP.player.fullscreen();
               
               if(LMS.isScorm){
                  if(EXP.player.wrap.main.classList.contains("fullscreen") && LMS.isPorting)
                     EXP.player.fullscreen();

                  if(nidx+1 == midx){
                     LMS.move.nextSco();
                  }else if(nidx-1 == midx){
                     LMS.move.prevSco();
                  }else{
                     console.log("not allowed...");
                  }

                  if(!LMS.isPorting){
                     //국립 통일교육원 통합하면서 load와 move 분기 처리
                     if(EXP.option.mode == "s"){
                        this.load(np)
                     }else{
                        (!LMS.isScorm) ? this.move(mnp) : this.move(np);
                     }
                     LMS.init();
                  }
               }else{
                  //국립 통일교육원 통합하면서 load와 move 분기 처리
                  if(EXP.option.mode == "s"){
                     this.load(np)
                  }else{
                     // console.log("-np : " , np, mnp, !LMS.isScorm);
                     (!LMS.isScorm) ? this.move(mnp) : this.move(np);
                  }
               }
            } */
            
         };         

         mod.name = "pageControl";
         mod.exports =pageControl;
      }),
      //bookmark - 초기화 및 저장
      (function(mod, EXP, LMS, $){
         function bookmark(rnp, rtp){
            var bookmarkInv;
            if(EXP.option.dataSaveTime && EXP.option.isBookMarkTimeJump){
               clearInterval(bookmarkInv);
               bookmarkInv = setInterval(function(){
                  if(EXP.player.currentTime >= 0.1 && EXP.player.currentTime < EXP.player.duration-1 ){
                     EXP.bookmarks.set(rnp, EXP.player.currentTime, true);
                  }else{                     
                     EXP.bookmarks.set(rnp, 0, true);
                  }
               }, EXP.option.dataSaveTime);
            }
         }

         mod.name = "bookmark";
         mod.exports = bookmark;
      }),
      //msg - 컨트롤러 엔진간 통신모듈//////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){

         function msg(msg){
            EXP.log("msg:"+msg);
            if(msg == "study_locked"){
               EXP.alert(EXP.MSG_STR.STUDY_LOCK);
               return;
            }
            if(msg == "rate_locked"){
               EXP.alert(EXP.MSG_STR.RATE_LOCK);
               return;
            }
            //진도체크
            var np = (LMS.isScorm)?EXP.sco.nowpage:EXP.chapter.nowpage;
            var tp = (LMS.isScorm)?EXP.sco.totalpages:EXP.chapter.totalpages;
            
            //컨트로 제어가 풀리는 순간 페이지 LMS 진도처리 용
            if((msg == "study_checked" || EXP.player.isProgCheck) && !LMS.checkProg() && !EXP.isProcTester){
               LMS.checkProg(true);
               return;
            }
            //다음 말풍선
            //console.log(msg, " ::: ", EXP.wrap.nextB)
            if(msg == "study_finished" && EXP.wrap.nextB){
               console.log("study_finished - call")
               EXP.wrap.nextB.classList.add("on");
               EXP.effect("end");
               
               //수정 자동 페이지 넘김(특정 사이트에서 요청한 기능 pages.js에서 처리)
               /* var isAuto = ($.isNull(EXP.sco.pages[EXP.sco.nowpage-1].isAutoNextPage)) ? false : EXP.sco.pages[EXP.sco.nowpage-1].isAutoNextPage;
               if(isAuto){
                  EXP.buttons.next.trigger("click");
               } */
            }else if(msg == "studying" && EXP.wrap.nextB){
               EXP.wrap.nextB.classList.remove("on");
            }
         }      

         mod.name = "msg";
         mod.exports = msg;
      }),
      //alert - 경고창/////////////////////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         var preKey = "";
         var inv =null;

         function alert(msg){
            var key = null;
            Object.keys(EXP.MSG_STR).some(function(v){
               if(EXP.MSG_STR[v] == msg){
                  key = v;
                  return true;
               }
            })
            if(preKey != key && EXP.wrap.alert){
               EXP.wrap.alert.querySelector(".msg").innerHTML = msg;
               EXP.wrap.alert.classList.add("on");
               preKey = key;
               EXP.effect("alert")
               clearTimeout(inv);
               inv = setTimeout(function(){
                  EXP.wrap.alert.classList.remove("on");
                  preKey = "";
               },1000)
            }

         }

         mod.name = "alert";
         mod.exports = alert;
         mod.type = "public";         
      }),
      //effect - 효과음///////////////////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         var audio ={};
            var srcs = {
               // "alert":"../../../_ui/_common/mp3/alert_false.mp3",
               // "end":"../../../_ui/_common/mp3/page_end.mp3",
               // "click":"../../../_ui/_common/mp3/snd_click.mp3"
            }
            Object.keys(srcs).forEach(function(k){
               var aud = new Audio();
               aud.src = srcs[k];
               aud.load();
               audio[k] = aud;
            })


            function effect(type){
            try{
               audio[type].currentTime = 0;
               audio[type].volume = 0.25;
               audio[type].play();
            }catch(e){}
         }
            
         mod.name = "effect";
         mod.exports = effect;
         mod.type = "public";
      }),
      // (function(mod,EXP,LMS,$){
      //    function resizer(e){
      //       const _cw = EXP.option.size.width;
      //       const _ch = EXP.option.size.height;
      //       const bodyTag = EXP.wrap.main.parentNode;
      //       const checkResizeTag = EXP.wrap.main;

      //       const resizeObserver = new ResizeObserver((entries) => {
      //             let clw = Math.min(bodyTag.clientWidth, _cw);
      //             let clh = Math.min(bodyTag.clientHeight, _ch);
      //             let _w = Math.min(clw , _cw);
      //             let _h =  Math.min(clh , _ch);

      //             let hzoom = Math.min(_w/_cw, 1);
      //             let vzoom = Math.min(_h/_ch, 1);

      //             let zoom = Math.min(hzoom, vzoom);
      //             //console.log("zoom : ", zoom , hzoom , vzoom)
      //             //let zoom = Math.min(_w/_cw, 1);

      //             checkResizeTag.style.transform = 'scale('+zoom+')';
      //             checkResizeTag.style.transformOrigin = "left top";
      //             EXP.wrap.main.style.marginTop = Math.max(0,(window.innerHeight-EXP.wrap.main.clientHeight*zoom)/2)+"px";
      //             EXP.wrap.main.style.marginLeft = Math.max(0,(window.innerWidth-EXP.wrap.main.clientWidth*zoom)/2)+"px";
                  
      //       });
      //       resizeObserver.observe(EXP.wrap.main.parentNode);
      //    };


      //    window.addEventListener("resize",resizer);

      //    mod.name="resizer";
      //    mod.exports = resizer;
      //    mod.type = "public";
      // }),
      /* //resizer - 학습창 리사이징//////////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         function resizer(e){
            if(EXP.wrap.vod){
               var hide_control = EXP.option.control_setting["컨트롤러숨김기능"];
               var checkResizeTag = EXP.wrap.main.offsetParent;
               var con_h = (hide_control) ? 0 : EXP.wrap.vod.querySelector(".video-controls").getBoundingClientRect().height;
               // console.log("con_h : ", con_h)
               var hzoom = Math.min(1,checkResizeTag.clientWidth/EXP.option.size.width);
               var vzoom = Math.min(1,(checkResizeTag.clientHeight-con_h)/(EXP.option.size.height-con_h));

               var zoom = (hzoom > vzoom) ? vzoom : hzoom;
               EXP.wrap.main.style.width = EXP.option.size.width*zoom+"px";               
               

               if(EXP.wrap.nav){
                  EXP.wrap.nav.style.height = EXP.option.size.height+"px";
                  EXP.wrap.nav.style.zoom = EXP.wrap.vod.clientWidth/EXP.option.size.width;
               }

               if(EXP.wrap.header){
                  EXP.wrap.header.style.width = EXP.option.size.width+"px";
                  EXP.wrap.header.style.zoom = EXP.wrap.vod.clientWidth/EXP.option.size.width;
                  EXP.wrap.main.querySelector(".pre_wrap").style.zoom = EXP.wrap.vod.clientWidth/EXP.option.size.width;
               };

               
               setTimeout(function(){//완성

                  if(EXP.wrap.vod.classList.contains("fullscreen")){
                     EXP.wrap.vod.style.height = "auto";
                  }else{
                     //controls type 수정 후 resize 오류 수정
                     let skinType = (EXP.option.skin.type) ? EXP.option.skin.type : "default";
                     let _video = EXP.player.vod;0.
                     let _video_cotrols = EXP.player.wrap.control;
                     let _caption_wrap_height = EXP.player.wrap.caption.getBoundingClientRect().height ;
                     _caption_wrap_height = (_caption_wrap_height > 30) ? 30 : _caption_wrap_height;
                     _caption_wrap_height = (skinType == "default" || (KbcUtil.isIE && !EXP.player.wrap.caption.classList.contains("on"))) ? 0 : _caption_wrap_height;
                     EXP.wrap.vod.style.height = (hide_control) ? 
                                                _video.clientHeight + _caption_wrap_height+"px" :
                                                _video.clientHeight + _video_cotrols.clientHeight+_caption_wrap_height+"px";
                     // console.log()
                     if(skinType == "default" && EXP.wrap.vod.clientHeight >= EXP.option.size.height){
                        EXP.wrap.vod.style.height = EXP.option.size.height+"px";
                     };
                  }
                  
                 

                  EXP.wrap.main.style.marginTop = Math.max(0,(window.innerHeight-EXP.wrap.main.clientHeight)/2)+"px";

               },200)//css animation 속도보다 느려야 계산이 제대로 이루어짐.
            }
         };

      
         window.addEventListener("resize",resizer);

         mod.name="resizer";
         mod.exports = resizer;
         mod.type = "public";
      }), */
      //setMsg,getMsg - 메세지 설정//////////////////////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         function setMsg(id,msg){
            EXP.MSG_STR[id] = msg;
         }
         mod.name = "setMsg";
         mod.exports = setMsg;
         mod.type = "public";
      }),
      (function(mod,EXP,LMS,$){
         function getMsg(id){
            return EXP.MSG_STR[id];
         };
         mod.name = "getMsg";
         mod.exports = getMsg;
         mod.type = "public";
      }),
      //log - 콘솔/////////////////////////////////////////////////////////////////////////////////
      (function(mod,EXP,LMS,$){
         var userAgent = window.navigator.userAgent;
         var isChrome = userAgent.indexOf('Chrome')!=-1;

         function log(){
            if(this.debug){
               if(arguments[0] == "PRV"){
                  console.dir(EXP)
                  return;
               }
               
               if(isChrome){
                  if(typeof arguments[0] == "object"){
                     console.dir(arguments[0])
                  }else{
                     console.log("%c %c "+arguments[0]+" ","color:white;background-color:#ff6600","color:black");
                  }
               }else{
                  // console.log(arguments[0])
               }
            }
         }

         mod.name = "log";
         mod.exports = log;
         mod.type = "public";
      }),
   ]));

}));
 //kbc.preloader/////////////////////////////////////////////////////////////////
;(function(root,name,factory){
   if(root[name]){
      console.log("["+name+"] already defined.")
   }else{
      console.log(name +" 2023v1 init...");
      root[name] = factory(name);
   }
}(window,"KbcPreloader",function(){
   return(function(modules){
      var exports = {}
      modules.forEach(function(m){
            var module = {name:"",exports:{}};
            m.call(module.exports,module,exports);
            if(module.name)exports[module.name] = module.exports;
      });
      return exports;
   }([
      (function(mod,EXP){
         function Create(){
            function KbcPreloader(){
               EXP.wrap = {}
               EXP.wrap.main = document.body.querySelector(".preloader_wrap");
               EXP.wrap.per = EXP.wrap.main.querySelector(".per");
               this._per = 0;
               return this;
            }

            Object.defineProperty(KbcPreloader.prototype,"per",{
               set:function(np){
                  EXP.wrap.per.innerHTML = $.itostr(Math.floor(np))+"%";
                  this._per = np;
               },
               get:function(){
                  return this._per;
               }
            });

            KbcPreloader.prototype.set = function(per,callback){
               var p = this;
               $.motion(this,"per","float",{s:this.per,f:per},500).onFinish = function(){
                  $.motion.remove(p);
                  if(p.per >= 100){
                     p.dispose(callback);
                  }
                  
               };
            }

            KbcPreloader.prototype.dispose = function(callback){
               var p = this;
               callback = callback || function(){};

               EXP.wrap.main.fadeOut(function(){
                  if(this.parentNode)
                     this.parentNode.removeChild(this);
                  callback.call(p);
               })
            }

            return new KbcPreloader();
         }

         mod.name = "Create";
         mod.exports = Create;
      }),

   ]));
}));
